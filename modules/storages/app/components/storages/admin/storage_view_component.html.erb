<%=
  render(Primer::Beta::BorderBox.new) do |component|
    component.with_header(color: :default) do
      render(Primer::Beta::Text.new(font_weight: :semibold)) { I18n.t('storages.file_storage_view.general_information') }
    end

    component.with_row(scheme: :default) do
      render(OpTurbo::FrameComponent.new(id: :storage_general_info_section)) do
        if storage.new_record?
          render(
            Storages::Admin::Forms::GeneralInfoFormComponent.new(
              storage,
              cancel_button_should_break_from_frame: true # Return to index page on Cancel
            )
          )
        else
          render(Storages::Admin::GeneralInfoComponent.new(storage))
        end
      end
    end

    component.with_row(scheme: :neutral) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div, mr: 3) do
          render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.oauth_applications') }
        end
      end
    end

    component.with_row(scheme: :default) do
      render(OpTurbo::FrameComponent.new(id: :storage_openproject_oauth_section)) do
        if storage.new_record? || openproject_oauth_application_section_closed?
          render(Storages::Admin::OAuthApplicationInfoComponent.new(oauth_application:, storage:))
        else
          render(
            Storages::Admin::OAuthApplicationCredentialsCopyComponent.new(
              oauth_application:,
              storage:,
              submit_button_path: show_oauth_application_admin_settings_storage_path(storage),
              cancel_button_path: admin_settings_storages_path
            )
          )
        end
      end
    end

    component.with_row(scheme: :default) do
      render(OpTurbo::FrameComponent.new(id: :storage_oauth_client_section)) do
        render(Storages::Admin::OAuthClientInfoComponent.new(oauth_client: storage.oauth_client, storage:))
      end
    end

    component.with_row(scheme: :neutral) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div) do
          render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.project_folders') }
        end
      end
    end

    component.with_row(scheme: :default) do
      render(OpTurbo::FrameComponent.new(id: :automatically_managed_project_folders_section)) do
        grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
          grid.with_area(:item, tag: :div, mr: 3) do
            concat(render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1, test_selector: 'storage-managed-project-folders-label')) { I18n.t('storages.file_storage_view.automatically_managed_folders') })
            concat(automatically_managed_project_folders_status_label)
          end

          grid.with_area(:description, tag: :div, color: :subtle, test_selector: 'storage-automatically-managed-project-folders-description') do
            render(Primer::Beta::Truncate.new(font_weight: :light)) { I18n.t('storages.page_titles.managed_project_folders.subtitle_short') }
          end

          if editable_storage?
            grid.with_area(:"icon-button", tag: :div, color: :subtle) do
              flex_layout(justify_content: :flex_end) do |icons_container|
                icons_container.with_column do
                  render(
                    Primer::Beta::IconButton.new(
                      icon: :pencil,
                      tag: :a,
                      href: new_admin_settings_storage_automatically_managed_project_folders_path(storage),
                      scheme: :invisible,
                      aria: { label: I18n.t('storages.label_edit_storage_automatically_managed_folders') },
                      test_selector: 'storage-edit-automatically-managed-project-folders-button'
                    )
                  )
                end
              end
            end
          end
        end
      end
    end
  end
%>
