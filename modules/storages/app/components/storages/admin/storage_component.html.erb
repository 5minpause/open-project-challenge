<%=
  render(Primer::Beta::BorderBox.new) do |component|
    component.with_header(color: :default) do
      grid_layout('op-storage-view--header', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div) do
          render(Primer::Beta::Text.new(font_weight: :semibold)) { I18n.t('storages.file_storage_view.general_information') }
        end
      end
    end

    component.with_row(scheme: :default) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div, mr: 3) do
          concat(render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.storage_provider') })

          if storage.configured?
            concat(render(Primer::Beta::Label.new(scheme: :success, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_completed') })
          else
            concat(render(Primer::Beta::Label.new(scheme: :attention, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_incomplete') })
          end
        end

        grid.with_area(:description, tag: :div, color: :subtle, data: { 'test-selector': 'storage-description' }) do
          render(Primer::Beta::Truncate.new(font_weight: :light)) { storage_description }
        end

        grid.with_area(:"icon-button", tag: :div, color: :subtle, mr: 3, justify_self: :end) do
          render(Primer::Beta::IconButton.new(icon: :pencil, scheme: :invisible, aria: { label: I18n.t('storages.label_edit_storage') } , data: { 'test-selector': 'storage-edit-button' }))
        end
      end
    end

    component.with_row(scheme: :neutral) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div, mr: 3) do
          render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.oauth_applications') }
        end
      end
    end

    component.with_row(scheme: :default) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div, mr: 3) do
          concat(render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.openproject_oauth') })

          if storage.configured?
            concat(render(Primer::Beta::Label.new(scheme: :success, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_completed') })
          else
            concat(render(Primer::Beta::Label.new(scheme: :attention, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_incomplete') })
          end
        end

        grid.with_area(:description, tag: :div, color: :subtle, data: { 'test-selector': 'storage-openproject-oauth-client-description' }) do
          render(Primer::Beta::Truncate.new(font_weight: :light)) { openproject_oauth_client_description }
        end

        grid.with_area(:"icon-button", tag: :div, color: :subtle, mr: 3, justify_self: :end) do
          render(Primer::Beta::IconButton.new(icon: :sync, scheme: :invisible, aria: { label: I18n.t('storages.label_edit_storage') } , data: { 'test-selector': 'storage-edit-button' }))
        end
      end
    end

    component.with_row(scheme: :default) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div, mr: 3) do
          concat(render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.nextcloud_oauth') })

          if storage.configured?
            concat(render(Primer::Beta::Label.new(scheme: :success, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_completed') })
          else
            concat(render(Primer::Beta::Label.new(scheme: :attention, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_incomplete') })
          end
        end

        grid.with_area(:description, tag: :div, color: :subtle, data: { 'test-selector': 'storage-oauth-client-id-description' }) do
          render(Primer::Beta::Truncate.new(font_weight: :light)) { provider_oauth_client_description }
        end

        grid.with_area(:"icon-button", tag: :div, color: :subtle, mr: 3, justify_self: :end) do
          render(Primer::Beta::IconButton.new(icon: :sync, scheme: :invisible, aria: { label: I18n.t('storages.label_edit_storage') } , data: { 'test-selector': 'storage-edit-button' }))
        end
      end
    end

    component.with_row(scheme: :neutral) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div) do
          render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.project_folders') }
        end
      end
    end

    component.with_row(scheme: :default) do
      grid_layout('op-storage-view--row', tag: :div, align_items: :center) do |grid|
        grid.with_area(:item, tag: :div, mr: 3) do
          concat(render(Primer::Beta::Text.new(font_weight: :semibold, mr: 1)) { I18n.t('storages.file_storage_view.automatically_managed_folders') })

          if storage.configured?
            concat(render(Primer::Beta::Label.new(scheme: :success, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_active') })
          else
            concat(render(Primer::Beta::Label.new(scheme: :attention, data: { 'test-selector': 'label-configuration-status' })) { I18n.t('storages.label_incomplete') })
          end
        end

        grid.with_area(:description, tag: :div, color: :subtle, data: { 'test-selector': 'storage-oauth-client-id-description' }) do
          render(Primer::Beta::Truncate.new(font_weight: :light)) { I18n.t('storages.page_titles.managed_project_folders.subtitle_short') }
        end

        grid.with_area(:"icon-button", tag: :div, color: :subtle, mr: 3, justify_self: :end) do
          render(Primer::Beta::IconButton.new(icon: :pencil, scheme: :invisible, aria: { label: I18n.t('storages.label_edit_storage') } , data: { 'test-selector': 'storage-edit-button' }))
        end
      end
    end
  end
%>
